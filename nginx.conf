events {
    worker_connections 1024;
}

http {
    # Upstream definitions for DIFFERENT MCP servers with proxy wrappers
    upstream everything_mcp {
        server everything-mcp:3000;
    }
    
    upstream filesystem_mcp {
        server filesystem-mcp:3001;
    }
    
    upstream git_mcp {
        server git-mcp:3002;
    }
    
    upstream memory_mcp {
        server memory-mcp:3003;
    }
    
    # Main server block (port 8000)
    server {
        listen 80;
        
        # Service discovery routes for DIFFERENT MCP servers
        location /everything/ {
            proxy_pass http://everything_mcp/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        location /filesystem/ {
            proxy_pass http://filesystem_mcp/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        location /git/ {
            proxy_pass http://git_mcp/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        location /memory/ {
            proxy_pass http://memory_mcp/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # Health check endpoint
        location /health {
            return 200 '{"status":"healthy","timestamp":"$time_iso8601","servers":{"everything":"http://everything-mcp:3000","filesystem":"http://filesystem-mcp:3001","git":"http://git-mcp:3002","memory":"http://memory-mcp:3003"},"proxies":{"filesystem":"mcp-streamablehttp-proxy","git":"mcp-streamablehttp-proxy","memory":"mcp-proxy"}}';
            add_header Content-Type application/json;
        }
        
        # Service discovery endpoint
        location /services {
            return 200 '{"services":[{"name":"everything","url":"http://localhost:8000/everything/","direct":"http://localhost:3000/","capabilities":"Reference implementation with prompts, resources, and tools","transport":"native"},{"name":"filesystem","url":"http://localhost:8000/filesystem/","direct":"http://localhost:3001/","capabilities":"Secure file operations with configurable access controls","transport":"mcp-streamablehttp-proxy"},{"name":"git","url":"http://localhost:8000/git/","direct":"http://localhost:3002/","capabilities":"Git repository operations and version control","transport":"mcp-streamablehttp-proxy"},{"name":"memory","url":"http://localhost:8000/memory/","direct":"http://localhost:3003/","capabilities":"Knowledge graph-based persistent memory system","transport":"mcp-proxy"}]}';
            add_header Content-Type application/json;
        }
        
        # Default route
        location / {
            return 200 '{"message":"MCP Server Gateway","available_routes":["/everything/","/filesystem/","/git/","/memory/"],"management":["/health","/services"],"note":"Demonstrates stdio-to-HTTP proxy wrapping"}';
            add_header Content-Type application/json;
        }
    }
    
    # Health check server (port 8080)
    server {
        listen 8080;
        
        location /health {
            return 200 '{"gateway":"healthy","timestamp":"$time_iso8601","proxy_demo":"active"}';
            add_header Content-Type application/json;
        }
        
        location / {
            return 200 '{"message":"Gateway Health Check","status":"operational","proxy_wrappers":"enabled"}';
            add_header Content-Type application/json;
        }
    }
} 